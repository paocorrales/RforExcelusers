[
  {
    "objectID": "prepare.html",
    "href": "prepare.html",
    "title": "Before we start",
    "section": "",
    "text": "To participate on the workshop you can either install R (&gt;4.0) and Rstudio (see instructions bellow) or use an instance of R at RStudio Cloud.\n\nUsing RStudio Cloud\nIf you want to use RStudio Cloud you will need a free account. Go to posit.cloud/ and follow de instructions to register. Keep in mind that the free account is limited to 25 hours per month and you don’t want to use it all before the workshop.\nWe’ll provide a link to a pre-configured RStudio project during the workshop. You don’t have to do anything else.\n\n\nInstalling R and RStudio\nTo install R and RStudio follow the instructions in these videos by Danielle Navarro.\nAfter you have everything installed, you’ll need to install a few packages required for the workshop. Follow these instructions:\n\nOpen RStudio\nOn the console (the panel on the left) type the following commands\n\n\ninstall.packages(\"tidyverse\")\ninstall.packages(\"palmerpenguins\")\n\nDuring the workshop we’ll provide you with an RStudio project with all the files you’ll need. Please make sure you have a software to unzip files.\nIf you have any questions or issues with this steps, please get in contact!"
  },
  {
    "objectID": "penguins_report.html",
    "href": "penguins_report.html",
    "title": "Gentoo Penguins",
    "section": "",
    "text": "The Palmer Penguins data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network. The data set includes several characteristics from Adelie, Chinstrap and Gentoo penguins.\n\n\n\nSummary of penguins on the data set by species.\n\n\nSpecie\nCount\nMean Body Mass\n\n\n\n\nAdelie\n152\n3.70\n\n\nChinstrap\n68\n3.73\n\n\nGentoo\n124\n5.08\n\n\n\n\n\n\n\nOn this section we focus the analysis on the Gentoo species. The bill length is positively correlated with bill depth, penguins with longer bills usually have deeper bills.\n\n\n\n\n\n\n\n\n\nFemale and male penguins have differnet body mass. Male penguins generally are bigger than females."
  },
  {
    "objectID": "penguins_report.html#about-the-data",
    "href": "penguins_report.html#about-the-data",
    "title": "Gentoo Penguins",
    "section": "",
    "text": "The Palmer Penguins data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network. The data set includes several characteristics from Adelie, Chinstrap and Gentoo penguins.\n\n\n\nSummary of penguins on the data set by species.\n\n\nSpecie\nCount\nMean Body Mass\n\n\n\n\nAdelie\n152\n3.70\n\n\nChinstrap\n68\n3.73\n\n\nGentoo\n124\n5.08\n\n\n\n\n\n\n\nOn this section we focus the analysis on the Gentoo species. The bill length is positively correlated with bill depth, penguins with longer bills usually have deeper bills.\n\n\n\n\n\n\n\n\n\nFemale and male penguins have differnet body mass. Male penguins generally are bigger than females."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "What is this course about?\nThis course is intended for people who use spreadsheets for data manipulation and would like to learn how to work with R. Therefore its starts from the beginning: why use R? and where to start?\nWe propose to work with R in an orderly and reproducible way. For this reason, we present a workflow that allows those who take this course to apply good programming practices, work collaboratively and present their work in a single document that includes the analysis and the results using Quarto.\nWhenever we can, we will mention how what we propose to solve with R can also be done with spreadsheets and the advantages and disadvantages of each approach.\nWe’ll start with an example of a short report to show all the things you can do with R. Then you learn how to read data into R, create tables and visualizations to reproduce the same example. At the end, you’ll be able to create a report in different formats and share it with others.\n\n\nBefore we start\nDuring this workshop we will use and RStudio project. You can work locanly from your computer or use Posit Cloud (an RStudio version in the cloud). Please follow these instructions to prepare for the workshop.\n\n\nSchedule\nThis is a tentative time table.\n\n\n\nDuration (minutes)\nTopics\n\n\n\n\n45\nIntroduction, reports, workflows\n\n\n15\nReading data\n\n\n30\nPlotting data\n\n\n30\nBreak\n\n\n45\nData manipulation\n\n\n30\nReporting your work\n\n\n15\nQ&A and goodbye\n\n\n\n\n\nHi!\nI’m Pao Corrales\n I have a PhD in atmospheric sciences from the University of Buenos Aires. I worked in atmospheric sciences applying data assimilation techniques to improve short-term forecasts of severe events in Argentina and I’m currently working at Monash University exploring extremes in climate and weather in Australia. I’m trainer and instructor for The Carpentries and an RStudio certified instructor. I’m also part of Expedition Science, an Argentina-based NPO, where she leads educational projects such as science camps and workshops for students and K-12 science teachers. I’m a professor at the Data Sciences degree at Austral University and I develop openly licensed materials to teach and learn R from scratch.\npaobcorrales.github.io | fosstodon.org/@paocorrales\n\n\nLicense\n All materials in this course are under the license Creative Commons Attribution-ShareAlike 4.0 International License.\nThis material is an updated version of From spreadsheets to R.\nWe are inspired and based on the following resources:\n\nR for Reproducible Scientific Analysis by The Carpentries\nR for Excel Users by Dr. Julie Stewart Lowndes and Dr. Allison Horst\nR for Data Science by Hadley Wickham\nde Excel a R by Paola Corrales and Elio Campitelli\nAn Antarctic Tour of the Tidyverse by Silvia Canelón\n\nThe source code for these materials and web page can be found at https://github.com/yabellini/fromSpreadSheetToR."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html",
    "href": "CODE_OF_CONDUCT.html",
    "title": "Code of conduct",
    "section": "",
    "text": "English\nSpanish\n\n\n\nThose of us who organize MetaDocencia are committed to fostering an open, safe and friendly environment and to guaranteeing the participation of all people in our activities and virtual spaces regardless of age, gender, sexual orientation, disability, physical appearance, nationality, race, ethnicity, religion (or lack thereof), ideology or technological choices.\nAll persons participating in MetaDocencia, including members of the coordinating team, collaborators, advisory team and participants must accept and respect the following code of conduct.\nIf you witness a situation that violates this code of conduct, please report it to cdc@metadocencia.org or any Code of Conduct team member.\n\n\n\nDemonstrating empathy and kindness to others\nRespecting different opinions, points of view, and experiences\nGiving and accepting appropriate constructive feedback\nAccepting responsibility and apologising to those we affect for our mistakes, learning from experience\nFocusing on what is best not only for us as individuals, but for the community at large\n\n\n\n\n\nUsing sexualized language or images as well as any unwanted sexual attention or advances\nDerogatory comments (trolling), insults and personal or political attacks\nAny kind of harassment in public or private\nPublishing other people’s private information, such as physical or e-mail addresses, without their explicit permission\nOther conduct that may reasonably be considered inappropriate in a professional setting\n\n\n\n\n\nThis code of conduct applies to all spaces related to MetaDocencia. This includes our email accounts, our Slack, our social networks, our workshops through Zoom, our GitHub organization and all its repositories, and any other media that is part of MetaDocencia.\n\n\n\nThe Code of Conduct team, composed of MetaDocencia members, is responsible for clarifying standards of acceptable behavior and reserves the right of admission or removal, temporary or permanent, from the MetaDocencia community for any behavior deemed unacceptable.\nIt also has the responsibility and reserves the right to remove, edit or reject comments, materials and other contributions that are not aligned with this Code of Conduct.\nCases of unacceptable behavior may be reported by sending an email to cdc@metadocencia.org or to any member of the Code of Conduct team. All messages will be reviewed and investigated and will result in a response appropriate to the circumstances. The privacy and security of those affected and/or reporting an incident will be respected at all times.\nIndividuals who are part of the Code of Conduct team agree to recuse themselves in the event of a conflict of interest associated with an incident report.\n\n\nTeam under construction * Someone from the core team * Someone from the collaborators * Someone from the collaborators * Someone from the advisory team\n\n\n\n\nThis Code of Conduct is adapted from Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/es/version/2/0/code_of_conduct.html and the code of conduct developed for useR!2021.\n\n\n\nQuienes organizamos MetaDocencia nos comprometemos a fomentar un ambiente abierto, seguro y amigable y garantizar la participación de todas las personas en nuestras actividades y espacios virtuales independientemente de su edad, género, orientación sexual, discapacidad, apariencia física, nacionalidad, raza, etnia, religión (o la falta de ella), ideología u opciones tecnológicas.\nTodas las personas que participen en MetaDocencia, incluyendo integrantes del equipo coordinador, colaboradores, equipo asesor y participantes deberán aceptar y respetar el siguiente código de conducta.\nSi presencias una situación que viole este código de conducta, por favor, reportalo a cdc@metadocencia.org o al equipo de Código de Conducta.\n\n\n\nDemostrar empatía y amabilidad ante otras personas\nRespetar diferentes opiniones, puntos de vista y experiencias\nDar y aceptar adecuadamente retroalimentación constructiva\nAceptar la responsabilidad y disculparse ante quienes afectemos por nuestros errores, involuntarios o no, aprendiendo de la experiencia\nCentrarse en lo que sea mejor no sólo para nosotros como personas, sino para la comunidad en general\n\n\n\n\n\nEl uso de lenguaje o imágenes sexualizadas como también atención o avances sexuales no deseados\nComentarios despectivos (trolling), insultantes y ataques personales\nCualquier tipo de acoso en público o privado\nPublicar información privada de otras personas, tales como direcciones físicas o de correo electrónico, sin su permiso explícito\nOtras conductas que puedan ser razonablemente consideradas como inapropiadas en un entorno profesional\n\n\n\n\n\nEste código de conducta aplica a todos los espacios relacionados con MetaDocencia. Esto incluye nuestras cuentas de correo electrónico, nuestro Slack, nuestras redes sociales, nuestros talleres, nuestra organización en GitHub y todos sus repositorios y cualquier otro medio que sea parte de MetaDocencia.\n\n\n\nEl equipo de Código de Conducta formado por integrantes de MetaDocencia es responsable de aclarar los estándares de comportamiento aceptable y se reserva el derecho de admisión o permanencia, temporal o permanente, en la comunidad de MetaDocencia para cualquier caso de comportamiento considerado inaceptable.\nTambién tiene la responsabilidad y se reserva el derecho de eliminar, editar o rechazar comentarios, materiales y otras contribuciones que no estén alineadas con este Código de Conducta.\nLos casos de comportamiento inaceptable pueden ser informados enviando un correo electrónico a cdc@metadocencia.org o a cualquier persona que integra el equipo de Código de Conducta. Todos los mensajes serán revisados e investigados y darán como resultado una respuesta apropiada a las circunstancias. Se respetará en todo momento la privacidad y seguridad de las personas afectadas y/o que reporten un incidente.\nLas personas que forman parte del equipo de Código de Conducta se comprometen a recusarse en caso de haber conflicto de intereses asociados al reporte de un incidente.\n\n\nEquipo en construcción * Alguien del core tean * Alguien de colaboradores * Alguien de colaboradores * Alguien del advisory team\n\n\n\n\nEste Código de Conducta es una adaptación del Contributor Covenant, versión 2.0, disponible en https://www.contributor-covenant.org/es/version/2/0/code_of_conduct.html y el código de conducta desarrollado para useR!2021."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#code-of-conduct-1",
    "href": "CODE_OF_CONDUCT.html#code-of-conduct-1",
    "title": "Code of conduct",
    "section": "",
    "text": "Those of us who organize MetaDocencia are committed to fostering an open, safe and friendly environment and to guaranteeing the participation of all people in our activities and virtual spaces regardless of age, gender, sexual orientation, disability, physical appearance, nationality, race, ethnicity, religion (or lack thereof), ideology or technological choices.\nAll persons participating in MetaDocencia, including members of the coordinating team, collaborators, advisory team and participants must accept and respect the following code of conduct.\nIf you witness a situation that violates this code of conduct, please report it to cdc@metadocencia.org or any Code of Conduct team member.\n\n\n\nDemonstrating empathy and kindness to others\nRespecting different opinions, points of view, and experiences\nGiving and accepting appropriate constructive feedback\nAccepting responsibility and apologising to those we affect for our mistakes, learning from experience\nFocusing on what is best not only for us as individuals, but for the community at large\n\n\n\n\n\nUsing sexualized language or images as well as any unwanted sexual attention or advances\nDerogatory comments (trolling), insults and personal or political attacks\nAny kind of harassment in public or private\nPublishing other people’s private information, such as physical or e-mail addresses, without their explicit permission\nOther conduct that may reasonably be considered inappropriate in a professional setting"
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#scope",
    "href": "CODE_OF_CONDUCT.html#scope",
    "title": "Code of conduct",
    "section": "",
    "text": "This code of conduct applies to all spaces related to MetaDocencia. This includes our email accounts, our Slack, our social networks, our workshops through Zoom, our GitHub organization and all its repositories, and any other media that is part of MetaDocencia."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#responsibilities-of-the-code-of-conduct-team",
    "href": "CODE_OF_CONDUCT.html#responsibilities-of-the-code-of-conduct-team",
    "title": "Code of conduct",
    "section": "",
    "text": "The Code of Conduct team, composed of MetaDocencia members, is responsible for clarifying standards of acceptable behavior and reserves the right of admission or removal, temporary or permanent, from the MetaDocencia community for any behavior deemed unacceptable.\nIt also has the responsibility and reserves the right to remove, edit or reject comments, materials and other contributions that are not aligned with this Code of Conduct.\nCases of unacceptable behavior may be reported by sending an email to cdc@metadocencia.org or to any member of the Code of Conduct team. All messages will be reviewed and investigated and will result in a response appropriate to the circumstances. The privacy and security of those affected and/or reporting an incident will be respected at all times.\nIndividuals who are part of the Code of Conduct team agree to recuse themselves in the event of a conflict of interest associated with an incident report.\n\n\nTeam under construction * Someone from the core team * Someone from the collaborators * Someone from the collaborators * Someone from the advisory team"
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#attribution",
    "href": "CODE_OF_CONDUCT.html#attribution",
    "title": "Code of conduct",
    "section": "",
    "text": "This Code of Conduct is adapted from Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/es/version/2/0/code_of_conduct.html and the code of conduct developed for useR!2021."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#código-de-conducta",
    "href": "CODE_OF_CONDUCT.html#código-de-conducta",
    "title": "Code of conduct",
    "section": "",
    "text": "Quienes organizamos MetaDocencia nos comprometemos a fomentar un ambiente abierto, seguro y amigable y garantizar la participación de todas las personas en nuestras actividades y espacios virtuales independientemente de su edad, género, orientación sexual, discapacidad, apariencia física, nacionalidad, raza, etnia, religión (o la falta de ella), ideología u opciones tecnológicas.\nTodas las personas que participen en MetaDocencia, incluyendo integrantes del equipo coordinador, colaboradores, equipo asesor y participantes deberán aceptar y respetar el siguiente código de conducta.\nSi presencias una situación que viole este código de conducta, por favor, reportalo a cdc@metadocencia.org o al equipo de Código de Conducta.\n\n\n\nDemostrar empatía y amabilidad ante otras personas\nRespetar diferentes opiniones, puntos de vista y experiencias\nDar y aceptar adecuadamente retroalimentación constructiva\nAceptar la responsabilidad y disculparse ante quienes afectemos por nuestros errores, involuntarios o no, aprendiendo de la experiencia\nCentrarse en lo que sea mejor no sólo para nosotros como personas, sino para la comunidad en general\n\n\n\n\n\nEl uso de lenguaje o imágenes sexualizadas como también atención o avances sexuales no deseados\nComentarios despectivos (trolling), insultantes y ataques personales\nCualquier tipo de acoso en público o privado\nPublicar información privada de otras personas, tales como direcciones físicas o de correo electrónico, sin su permiso explícito\nOtras conductas que puedan ser razonablemente consideradas como inapropiadas en un entorno profesional"
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#alcance",
    "href": "CODE_OF_CONDUCT.html#alcance",
    "title": "Code of conduct",
    "section": "",
    "text": "Este código de conducta aplica a todos los espacios relacionados con MetaDocencia. Esto incluye nuestras cuentas de correo electrónico, nuestro Slack, nuestras redes sociales, nuestros talleres, nuestra organización en GitHub y todos sus repositorios y cualquier otro medio que sea parte de MetaDocencia."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#responsabilidades-del-equipo-de-código-de-conducta",
    "href": "CODE_OF_CONDUCT.html#responsabilidades-del-equipo-de-código-de-conducta",
    "title": "Code of conduct",
    "section": "",
    "text": "El equipo de Código de Conducta formado por integrantes de MetaDocencia es responsable de aclarar los estándares de comportamiento aceptable y se reserva el derecho de admisión o permanencia, temporal o permanente, en la comunidad de MetaDocencia para cualquier caso de comportamiento considerado inaceptable.\nTambién tiene la responsabilidad y se reserva el derecho de eliminar, editar o rechazar comentarios, materiales y otras contribuciones que no estén alineadas con este Código de Conducta.\nLos casos de comportamiento inaceptable pueden ser informados enviando un correo electrónico a cdc@metadocencia.org o a cualquier persona que integra el equipo de Código de Conducta. Todos los mensajes serán revisados e investigados y darán como resultado una respuesta apropiada a las circunstancias. Se respetará en todo momento la privacidad y seguridad de las personas afectadas y/o que reporten un incidente.\nLas personas que forman parte del equipo de Código de Conducta se comprometen a recusarse en caso de haber conflicto de intereses asociados al reporte de un incidente.\n\n\nEquipo en construcción * Alguien del core tean * Alguien de colaboradores * Alguien de colaboradores * Alguien del advisory team"
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#atribución",
    "href": "CODE_OF_CONDUCT.html#atribución",
    "title": "Code of conduct",
    "section": "",
    "text": "Este Código de Conducta es una adaptación del Contributor Covenant, versión 2.0, disponible en https://www.contributor-covenant.org/es/version/2/0/code_of_conduct.html y el código de conducta desarrollado para useR!2021."
  },
  {
    "objectID": "04-data-manipulation.html",
    "href": "04-data-manipulation.html",
    "title": "Data manipulation",
    "section": "",
    "text": "In spreadsheet, pivot tables or dynamic tables are powerful tools for summarizing data in different ways. We can create these tables using the group_by and summarize functions from the tidyverse package.\nLet’s take a look at our report, right after we read the data, we create a summary table with the number of cases and the average body mass for each specie in our dataset.\nWe can use group_by() to group our data by species and summarize() to calculate the number of cases and the average body_mass_g for each grouping.\n\npenguins %&gt;% \n  group_by(species) %&gt;% \n  summarise(count = n(),\n            mean_body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 3\n  species   count mean_body_mass\n  &lt;chr&gt;     &lt;int&gt;          &lt;dbl&gt;\n1 Adelie      152          3701.\n2 Chinstrap    68          3733.\n3 Gentoo      124          5076.\n\n\nThe function n() returns the number of cases and the function mean computes the average. The parameter na.rm = TRUE tells the function to remove non available values (NA) before performing the calculation.\n\nQuestion: What if you don’t use group_by() before summarise()? Let’s try it and discuss what’s going on.\n\n\npenguins %&gt;% \n  summarise(count = n(),\n            mean_body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 1 × 2\n  count mean_body_mass\n  &lt;int&gt;          &lt;dbl&gt;\n1   344          4202.\n\n\nSo if we don’t group_by first, we will get a single summary statistic (n and mean in this case) for the whole dataset.\nNow, we want the average of the body mass in kilograms and with two decimals. We can change our summarise() call to get that calculation.\n\npenguins %&gt;% \n  group_by(species) %&gt;% \n  summarise(count = n(),\n            mean_body_mass = round(mean(body_mass_g/1000, na.rm = TRUE), 2))\n\n# A tibble: 3 × 3\n  species   count mean_body_mass\n  &lt;chr&gt;     &lt;int&gt;          &lt;dbl&gt;\n1 Adelie      152           3.7 \n2 Chinstrap    68           3.73\n3 Gentoo      124           5.08\n\n\nFirst we divide body mass by 1000 to transform from grams to kilograms and then we use the function round() to get only two decimals.\nNow we are at the point where we actually want to save this summary information as a variable so we can use it in further analyses and formatting.\nSo let’s add a variable assignment to that first line:\n\nsummary &lt;- penguins %&gt;% \n  group_by(species) %&gt;% \n  summarise(count = n(),\n            mean_body_mass = round(mean(body_mass_g/1000, na.rm = TRUE), 2))"
  },
  {
    "objectID": "04-data-manipulation.html#creating-summary-tables",
    "href": "04-data-manipulation.html#creating-summary-tables",
    "title": "Data manipulation",
    "section": "",
    "text": "In spreadsheet, pivot tables or dynamic tables are powerful tools for summarizing data in different ways. We can create these tables using the group_by and summarize functions from the tidyverse package.\nLet’s take a look at our report, right after we read the data, we create a summary table with the number of cases and the average body mass for each specie in our dataset.\nWe can use group_by() to group our data by species and summarize() to calculate the number of cases and the average body_mass_g for each grouping.\n\npenguins %&gt;% \n  group_by(species) %&gt;% \n  summarise(count = n(),\n            mean_body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 3\n  species   count mean_body_mass\n  &lt;chr&gt;     &lt;int&gt;          &lt;dbl&gt;\n1 Adelie      152          3701.\n2 Chinstrap    68          3733.\n3 Gentoo      124          5076.\n\n\nThe function n() returns the number of cases and the function mean computes the average. The parameter na.rm = TRUE tells the function to remove non available values (NA) before performing the calculation.\n\nQuestion: What if you don’t use group_by() before summarise()? Let’s try it and discuss what’s going on.\n\n\npenguins %&gt;% \n  summarise(count = n(),\n            mean_body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 1 × 2\n  count mean_body_mass\n  &lt;int&gt;          &lt;dbl&gt;\n1   344          4202.\n\n\nSo if we don’t group_by first, we will get a single summary statistic (n and mean in this case) for the whole dataset.\nNow, we want the average of the body mass in kilograms and with two decimals. We can change our summarise() call to get that calculation.\n\npenguins %&gt;% \n  group_by(species) %&gt;% \n  summarise(count = n(),\n            mean_body_mass = round(mean(body_mass_g/1000, na.rm = TRUE), 2))\n\n# A tibble: 3 × 3\n  species   count mean_body_mass\n  &lt;chr&gt;     &lt;int&gt;          &lt;dbl&gt;\n1 Adelie      152           3.7 \n2 Chinstrap    68           3.73\n3 Gentoo      124           5.08\n\n\nFirst we divide body mass by 1000 to transform from grams to kilograms and then we use the function round() to get only two decimals.\nNow we are at the point where we actually want to save this summary information as a variable so we can use it in further analyses and formatting.\nSo let’s add a variable assignment to that first line:\n\nsummary &lt;- penguins %&gt;% \n  group_by(species) %&gt;% \n  summarise(count = n(),\n            mean_body_mass = round(mean(body_mass_g/1000, na.rm = TRUE), 2))"
  },
  {
    "objectID": "04-data-manipulation.html#formatig-the-table",
    "href": "04-data-manipulation.html#formatig-the-table",
    "title": "Data manipulation",
    "section": "Formatig the table",
    "text": "Formatig the table\nTo make our table look better in a report, we have to change some of its elements. For example, the name of the variables should be informative for a person (at the moment they are useful names for a computer), and we can add a title to it and change the alignment of the numbers.\nWe can do that with the kable function.\n\nsummary %&gt;% \n  knitr::kable(col.names = c(\"Specie\", \"Count\", \"Mean Body Mass\"),\n               align = \"lcc\",\n               caption = \"Summary of penguins on the data set by specie.\")\n\n\nSummary of penguins on the data set by specie.\n\n\nSpecie\nCount\nMean Body Mass\n\n\n\n\nAdelie\n152\n3.70\n\n\nChinstrap\n68\n3.73\n\n\nGentoo\n124\n5.08\n\n\n\n\n\nWe can do a lot more with other functions (or “verbs”) of the tidyverse. Let’s see a couple more"
  },
  {
    "objectID": "04-data-manipulation.html#creating-new-variables",
    "href": "04-data-manipulation.html#creating-new-variables",
    "title": "Data manipulation",
    "section": "Creating new variables",
    "text": "Creating new variables\nThere are a lot of times in which we want to operate beyond the original data. This is often done by adding a column. We do this with the mutate() function.\nWe can add a new variable (called prop) representing the proportion of penguins in each species with by using mutate().\n\npenguins %&gt;% \n  group_by(species) %&gt;% \n  summarise(count = n(),\n            mean_body_mass = round(mean(body_mass_g/1000, na.rm = TRUE), 2)) %&gt;%\n  mutate(prop = count/nrow(penguins))\n\n# A tibble: 3 × 4\n  species   count mean_body_mass  prop\n  &lt;chr&gt;     &lt;int&gt;          &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie      152           3.7  0.442\n2 Chinstrap    68           3.73 0.198\n3 Gentoo      124           5.08 0.360"
  },
  {
    "objectID": "04-data-manipulation.html#filtering-data",
    "href": "04-data-manipulation.html#filtering-data",
    "title": "Data manipulation",
    "section": "Filtering data",
    "text": "Filtering data\nIn our report we also make plot by species. To do this we need to keep only the data of the species we want to analyse. We use the filter() function to filter data frames, this function returns a new data frame with only the rows that satisfy some conditions.\nWe can use logical operators (&gt;, &lt;, &gt;=, &lt;=, ==) to create conditions from numeric variables These operators are also useful for dates and text strings. Look at the code to see a condition for text type of data.\n\npenguins %&gt;% \n  filter(species == \"Gentoo\")\n\n# A tibble: 124 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Gentoo  Biscoe           46.1          13.2               211        4500\n 2 Gentoo  Biscoe           50            16.3               230        5700\n 3 Gentoo  Biscoe           48.7          14.1               210        4450\n 4 Gentoo  Biscoe           50            15.2               218        5700\n 5 Gentoo  Biscoe           47.6          14.5               215        5400\n 6 Gentoo  Biscoe           46.5          13.5               210        4550\n 7 Gentoo  Biscoe           45.4          14.6               211        4800\n 8 Gentoo  Biscoe           46.7          15.3               219        5200\n 9 Gentoo  Biscoe           43.3          13.4               209        4400\n10 Gentoo  Biscoe           46.8          15.4               215        5150\n# ℹ 114 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\nActivity: Write code to filter all the penguins in the Torgersen island.\n\n\nActivity: Now write the code to filter all the penguins with flipper lenght greater than 200"
  },
  {
    "objectID": "02-reading-data.html",
    "href": "02-reading-data.html",
    "title": "Reading data",
    "section": "",
    "text": "It’s time to present the data set we are using. The Palmer Penguins data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network. The data set includes several characteristics from Adelie, Chinstrap and Gentoo penguins. You can read more about it on the palmerpenguins Documentation.\nThese data are available in R by installing the palmerpenguins package, but because we want to learn how to read data into R, we are gonig to read them from csv and xls files."
  },
  {
    "objectID": "02-reading-data.html#about-palmerpenguins",
    "href": "02-reading-data.html#about-palmerpenguins",
    "title": "Reading data",
    "section": "",
    "text": "It’s time to present the data set we are using. The Palmer Penguins data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network. The data set includes several characteristics from Adelie, Chinstrap and Gentoo penguins. You can read more about it on the palmerpenguins Documentation.\nThese data are available in R by installing the palmerpenguins package, but because we want to learn how to read data into R, we are gonig to read them from csv and xls files."
  },
  {
    "objectID": "02-reading-data.html#reading-csv-files",
    "href": "02-reading-data.html#reading-csv-files",
    "title": "Reading data",
    "section": "Reading csv files",
    "text": "Reading csv files\nWe’ll start by loading the tidyverse package, which gives us access to dozens of functions to work with. For know we’ll use the read_csv() function to read a csv file that is stored in the data directory.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\npenguins &lt;- read_csv(\"data/penguins.csv\")\n\nRows: 344 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nIn Excel or Google Sheets, data are stored in the spreadsheet and organized in cells. In R, they are stored in objects. When we read a csv file, the data goes directly to the penguins data frame and it’s ready to be used. In the Environment panel we can see the penguins object, if we click that object the data will open in a new tab fro us to take a look.\n\nThis view is the most similar to the one we have in a spreadsheet. We can get to this panel by running View(penguins) on the console There are several other function to look at our data. Let’s use one of them\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;chr&gt; \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"A…\n$ island            &lt;chr&gt; \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", …\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;dbl&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;dbl&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;chr&gt; \"male\", \"female\", \"female\", NA, \"female\", \"male\", \"f…\n$ year              &lt;dbl&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nThis output is different and give us information about the type of data in each column (or variable).\nSometimes our data is not so friendly and we need to give more information to the function to be able to read the data properly. You can find these options by looking into the function’s documentation.\n\nGo ahead and write ?read_csv() on the console. What is the name of the option to change the default delimitator?"
  },
  {
    "objectID": "02-reading-data.html#reading-xls-files",
    "href": "02-reading-data.html#reading-xls-files",
    "title": "Reading data",
    "section": "Reading xls files",
    "text": "Reading xls files\nWhat about xls files? For that we’ll need differnet R package, readxl that is already installed on the RStudio Cloud project. In this case the function is called read_excel()\n\nlibrary(readxl)\n\npenguins_xls &lt;- read_excel(\"data/penguins.xlsx\")\n\nAnd that’s it, we’ve read an xls file. Of course, we sometimes have to work with files with multiple sheets or data that is no very organised. This functions comes with several options or arguments to read specific sheets (sheet = &lt;name of the sheet&gt;) or a specific range (range = \"C1:E7\") and others.\nNow that we have the data read into R, it’s time to do some analysis."
  },
  {
    "objectID": "01-introduction.html",
    "href": "01-introduction.html",
    "title": "Introduction and Reports",
    "section": "",
    "text": "Spreadsheets are an admirable software. They are great for data entry, for viewing raw data and for making quick charts. If you have been using it for a long time, you must have learned a lot of tricks to get the most out of it; things like formulas, pivot tables, and even macros. But surely you also suffered from its limitations.\nIn a spreadsheet there is no clear boundary between data and analysis. Overwriting data is a very real danger and complicated analyses are very hard to understand, especially if you open a spreadsheet put together by someone else (who may be you from the past). Also, repeating an analysis on different data or with different parameters can become very cumbersome.\nIf what you need are frequent and automatic reports, and data analysis with many moving parts, it would be nice to be able to write a recipe-like step-by-step set of instructions and have the computer run everything automatically every time you ask it to. To be able to do that, that step-by-step has to be written in a language that the computer can understand, R is one of that languages."
  },
  {
    "objectID": "01-introduction.html#why-r",
    "href": "01-introduction.html#why-r",
    "title": "Introduction and Reports",
    "section": "",
    "text": "Spreadsheets are an admirable software. They are great for data entry, for viewing raw data and for making quick charts. If you have been using it for a long time, you must have learned a lot of tricks to get the most out of it; things like formulas, pivot tables, and even macros. But surely you also suffered from its limitations.\nIn a spreadsheet there is no clear boundary between data and analysis. Overwriting data is a very real danger and complicated analyses are very hard to understand, especially if you open a spreadsheet put together by someone else (who may be you from the past). Also, repeating an analysis on different data or with different parameters can become very cumbersome.\nIf what you need are frequent and automatic reports, and data analysis with many moving parts, it would be nice to be able to write a recipe-like step-by-step set of instructions and have the computer run everything automatically every time you ask it to. To be able to do that, that step-by-step has to be written in a language that the computer can understand, R is one of that languages."
  },
  {
    "objectID": "01-introduction.html#how-are-we-going-to-work",
    "href": "01-introduction.html#how-are-we-going-to-work",
    "title": "Introduction and Reports",
    "section": "How are we going to work?",
    "text": "How are we going to work?\nWe are going to use R as a language and RStudio as an IDE, a Integrated Development Environment. If you don’t have these installed on your computer don’t worry, we have this RStudio Cloud project for you to work with.\nTo launch RStudio, double-click on the RStudio icon. Launching RStudio also launches R (actually you will probably never open R by itself).\n\n\nNotice the default panes:\n\nConsole (entire left)\nEnvironment/History (tabbed in upper right)\nFiles/Plots/Packages/Help (tabbed in lower right)\n\nWe don’t need to know how to use all of this right away. We will become familiar with more of the options and capabilities throughout the workshop.\nWe can write code, that is, instructions to be executed by R on the Console. For example we can calculate the result two plus two by writing\n\n2 + 2\n\n[1] 4\n\n\non the Console and pressing enter.\nThe result appears right below. We can also save that result to an object, in this case called x.\n\nx &lt;- 2 + 2 \n\nThat little arrow is the assignment operator and works as an =. Now the result is saved on the Environment as a variable with name x and is not printed on the console.\nThis is great when we are trying out code to see if it works but we’ll lose everything when we close RStudio. What we need to do is to save the code that generates your analysis. For that we use R Scripts and RMarkdown files.\nWe are going to have our first experience with R through RMarkdown, so let’s see what an RMarkdown document is. We prepared this example report for you, please open it on RStudio or in RStudio Cloud. The file will appear on a new forth panel on the left-hand side of the screen, and the console panel will move to bottom."
  },
  {
    "objectID": "01-introduction.html#rmarkdown",
    "href": "01-introduction.html#rmarkdown",
    "title": "Introduction and Reports",
    "section": "RMarkdown",
    "text": "RMarkdown\nAn RMarkdown file is a plain text file, with some rules and special syntax that allow us to write code and text together. When it is “knited,” the code will be evaluated and executed and the text formatted so that it creates a reproducible report or document that is nice to read and contains all your work.\nThis is really critical to reproducibility. It also saves us time and can help with automation tasks. This document will recreate your figures for you in the same document where you are writing the text that explain them. This will save you the effort of doing some analysis, saving a plot on a file, copy-pasting that plot into Word or Power Point or Google Slides, and having to do it all over again after discovering a typo.\nNow let’s see how our Penguins Report looks like.\n\nThe top part has the Title and the output type (which in this case is an HTML document).\nBelow that there are alternating white and grey sections. These are the two main sections that make up an RMarkdown file: * Grey sections are R code * White sections are Markdown text\nThere is black, blue text and green text.\n\n\nLet’s go ahead and “Knit” the document by clicking the blue yarn () at the top of the RMarkdown file.\n\nWe’ve just made an html file! This is a single webpage that we are viewing locally on our own computers. By knitting this RMarkdown document, R has formatted the markdown text and ran the R code.\n\n\nMarkdown text\nYou can get a guide to rmarkdown in this cheat sheet, but here is a minimum syntax to get you started:\n\nheaders start with #or ##and so on (it’s important to put a space after the last #).\nbold words are surrounded with **\nand italics, with _\n\n\n\nR Code\nThe R code is written inside code “chunks”. Code chunks start with ```{r label} (where “label” is an optional, unique name) and end with ```. In RStudio, you can create a new chunk with the Ctrl + Alt + I keboard shortcut.\nThis report shows information about the Gentoo penguins but we could change a few code lines to create the same analysis for the other two species, Adelie and Chinstrap.\n\nNow is your turn. Go ahead and look through the code, if you find any mention of \"gentoo\", change it to any of the other species.\n\nThis task is a bit cumbersome if you have to change many things any time we want to re-run the analysis for different species. But don’t worry, we’ll learn how to make everything more automatic by the end of the workshop."
  },
  {
    "objectID": "03-plotting-data.html",
    "href": "03-plotting-data.html",
    "title": "Plotting Data",
    "section": "",
    "text": "Visualising data is useful not only to explore the data and identify the relationship between different variables, but also to communicate the result of the analysis. The ggplot2 package allows us you to generate high quality plots in just a few lines of code. Any ggplot plot will have at least 3 components: the data, a coordinate system and a geometry (the visual representation of the data) and will be built in layers.\nLet’s start by making plots!"
  },
  {
    "objectID": "03-plotting-data.html#first-layer-the-area-of-the-graphic",
    "href": "03-plotting-data.html#first-layer-the-area-of-the-graphic",
    "title": "Plotting Data",
    "section": "First layer: the area of the graphic",
    "text": "First layer: the area of the graphic\nThe main function of ggplot2 is precisely ggplot(), which allows us to start the graph and also to define the global characteristics. The first argument of this function will be the data we want to visualize, always in a data.frame. In this case we use penguins.\nThe second argument is called mapping because it’s where we define how columns of the data “map” to visual properties of the geometries. This mapping is defined by the aes() function. In this case we indicate that in the x axis we want to plot the variable bill_length_mm and in the y-axis the variable bill_depth_mm.\nBut this alone is not enough, it only generates the first layer: the area of the graph.\n\nggplot(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm))"
  },
  {
    "objectID": "03-plotting-data.html#second-layer-geometries",
    "href": "03-plotting-data.html#second-layer-geometries",
    "title": "Plotting Data",
    "section": "Second layer: geometries",
    "text": "Second layer: geometries\nWe need to add a new layer to our chart, the geometric elements or “geoms” that will represent the data. To do this we add a geom function, for example if we want to represent the data with points we will use geom_point().\n\nggplot(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point()\n\n\n\n\n\n\n\n\nWe have our first plot!\nYou may have noticed that the dots are clustered in groups. Perhaps some other variable explains this behaviour.\nTo include information from other variables in our plot we can take advantage of the aesthetic characteristics of the geometries. In this case, we can “paint” the points according to the penguin species.\n\nggplot(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species))\n\n\n\n\n\n\n\n\nAgain, we use the aes() function to map a variable in our data to an element of the plot. And aha! Each species of penguins has different characteristics!"
  },
  {
    "objectID": "03-plotting-data.html#adding-geometries",
    "href": "03-plotting-data.html#adding-geometries",
    "title": "Plotting Data",
    "section": "Adding geometries",
    "text": "Adding geometries\nVery often it is not enough to look at the raw data to identify the relationship between variables; it is necessary to use some statistical transformation to highlight those relationships, either by fitting a model or calculating some statistics.\nFor this, ggplot2 has geoms that calculate some common statistical transformations. Let’s try with geom_smoth() to fit a linear model to each species.\n\nggplot(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species)) +\n  geom_smooth(aes(color = species), method = \"lm\")\n\n\n\n\n\n\n\n\nBy default geom_smooth() fits the data using the loess method (local linear regression) when there are less than 1000 data. But it is very common that you want to fit a global linear regression. In that case, you have to set method = \"lm\"."
  },
  {
    "objectID": "03-plotting-data.html#lets-talk-about-the-look-of-the-plot",
    "href": "03-plotting-data.html#lets-talk-about-the-look-of-the-plot",
    "title": "Plotting Data",
    "section": "Let’s talk about the look of the plot",
    "text": "Let’s talk about the look of the plot\nFor now we used the default ggplot look. We could change the look of your plot to match the style of the institution where we work, of the journal where we are going to publish it or simply to make it more eye-catching.\nLet’s start with colour. To change the aesthetic appearance of a plot element, we add a new layer with the scale_* function. In this case we’ll use scale_color_manual() to choose the colours of the points manually. We could also use previously defined colour palettes like Viridis or Color Brewer.\nWe’ll need 3 colors for the 3 species, let’s use \"darkorange\", \"purple\" and \"cyan4\" following the beautiful visualizations made by Allison Horst.\n\nggplot(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species)) +\n  geom_smooth(aes(color = species), method = \"lm\") +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) \n\n\n\n\n\n\n\n\nWe are getting there! Now, let’s add some text elements with a new ggplot layer: labs().\n\nggplot(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species)) +\n  geom_smooth(aes(color = species), method = \"lm\") +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin bill dimensions\",\n       subtitle = \"Bill length and depth for Adelie, Chinstrap and Gentoo,  Penguins at Palmer Station LTER\",\n       x = \"Bill length (mm)\",\n       y = \"Bill depth (mm)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\") \n\n\n\n\n\n\n\n\nNow the axes labels are more legible and we have a title and subtitle that explains what the plot is about.\nWe could keep changing this endlessly but we’ll finish with the general look of your plot.\nThe overall look of a plot is defined by its theme. ggplot2 has many themes available and for all tastes. But there are also other packages that extend the possibilities, for example ggthemes. By default ggplot2 uses theme_grey(), let’s try theme_minimal():\n\nggplot(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species)) +\n  geom_smooth(aes(color = species), method = \"lm\") +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin bill dimensions\",\n       subtitle = \"Bill length and depth for Adelie, Chinstrap and Gentoo,  Penguins at Palmer Station LTER\",\n       x = \"Bill length (mm)\",\n       y = \"Bill depth (mm)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nNow it’s your turn. Choose a theme you like and try it out. Also, if you can think of a better title, modify it!"
  },
  {
    "objectID": "05-reports.html",
    "href": "05-reports.html",
    "title": "Reporting your work",
    "section": "",
    "text": "The first example report we saw was rendered into an html file. But what about Word or PDF files, which can be more usefull or expected in some situations?. RMarkdown, and a whole ecosystem of other packages, allows you to generate documents in multiple formats using the same plain text file.\nThe way you generate the output file format is by changing the output option on the header.\nYou can also use the “knit” button, clicking on the little arrow on the right to see all the options."
  },
  {
    "objectID": "05-reports.html#code-control",
    "href": "05-reports.html#code-control",
    "title": "Reporting your work",
    "section": "Code control",
    "text": "Code control\nOur example looks quite tidy. We’ve hidden all the code and R messages so you can concentrate your attention on the table and figures. But this is not the default behaviour of an Rmd file. Usually the output will have both code and output, which is fine when you or the person that will read the report wants to see the code that generates those results, but it might not be what the final audience of the report might need. It’s up to you to decide if you want to show the code or not.\nTo change the options of a chunk code, all you have to do is list the options inside the square brackets. For example:\n```{r nombre-del-chunk, echo = FALSE, message = FALSE}\n\n```\nA particularly important set of options are the ones that control whether the code is executed and whether the result of the code will remain in the report or not:\n\neval = FALSE prevents the chunk code from being run, so it will not display results either. It is useful for displaying example code if you are writing, for example, a document to teach R.\necho = FALSE runs the chunk code and displays the results, but hides the code in the report. This is useful for writing reports for people who do not need to see the R code that generated the graph or table.\ninclude = FALSE runs the code but hides both the code and the results. It is useful to use in general configuration chunks where you load libraries.\n\nIf you are writing a report where you don’t want any code to be shown, adding echo = FALSE to each new chunk becomes tedious. The solution is to change the option globally so that it applies to all chunks. This is done by the knitr::opts_chunk$set() function, which sets the global options of the chunks that follow it. You’ll find this function on the first “setup” chunk.\n```{r setup, include = FALSE}\nknitr::opts_chunk$set(echo = FALSE, \n                  message = FALSE,\n                  warning = FALSE)\n```\n\nCurious about how the options works? Change them one at a time and knit the file each time to see what changes."
  },
  {
    "objectID": "05-reports.html#automatisation",
    "href": "05-reports.html#automatisation",
    "title": "Reporting your work",
    "section": "Automatisation",
    "text": "Automatisation\nAt the beginning of this workshop we asked you to change the penguin species in the example report. The task was not easy because “Gentoo” appears several times and it is easy to make a mistake. Parameterising a report allows us to define those kind of parameters in just one place and get different analyses from the same file.\nTo generate a parameterised report you have to add an element called params to the header with the list of parameters and their default values.\nparams:\n  species: gentoo\nFrom now on, you’ll have access to a variable called params which is a list containing the parameters and their value. To access the value of each parameter you use the $ operator as follows:\n\nparams$species\n\n[1] \"Gentoo\"\n\n\nIn this way, the original code can be modified to use the value of the specie stored in params$species.\n\npenguins %&gt;% \n  filter(species == params$species) %&gt;% \n  ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(color = \"darkorange\",\n             size = 3,\n             alpha = 0.8) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"darkorange\") +\n  theme_minimal() +\n  labs(title = \"Penguin bill dimensions\",\n       subtitle = paste(\"Bill length and depth for\", params$specie, \"Penguins at Palmer Station LTER\"),\n       x = \"Bill length (mm)\",\n       y = \"Bill depth (mm)\",\n       color = \"Penguin species\") \n\nHere we changed the subtitle to concatenate words with the value stored in params$species, this way we can construct the subtitle pragmatically.\nNow the report is ready to function as a parameterised report!\n\nFinally, change “Gentoo” on the yaml to generate a new report for one of the other species."
  },
  {
    "objectID": "CONTRIBUTING.html",
    "href": "CONTRIBUTING.html",
    "title": "R for Excel users",
    "section": "",
    "text": "Contributions of all kind are welcome, from bug reports and suggestions for improvements to new material.\n\nAll contributors must abide by our Code of Conduct.\nBy submitting a pull request, you agree that your contribution can be reshared under the CC-BY-SA License.\nIf you want to report an error, ask a question, or make a suggestion, please file an issue in the repository. You need to have a GitHub account in order to do this, but do not need to know how to use Git.\nIf your material is incorporated, we will add you to the acknowledgments unless you request otherwise."
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "R for Excel users",
    "section": "",
    "text": "This is a human-readable summary of (and not a substitute for) the license. You are free to:\n\nShare — copy and redistribute the material in any medium or format\nAdapt — remix, transform, and build upon the material\nfor any purpose, even commercially.\n\nThis license is acceptable for Free Cultural Works.\n\nThe licensor cannot revoke these freedoms as long as you follow the license terms.\n\nUnder the following terms:\n\nAttribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\nShareAlike — If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.\nNo additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.\n\nNotices:\n\nYou do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.\nNo warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material."
  },
  {
    "objectID": "personas.html",
    "href": "personas.html",
    "title": "Learner personas for the course",
    "section": "",
    "text": "from Spreadsheet to R is intended for people who usespreadsheeets (Excel, Google sheets) for data manipulation and analysis but would like to learn how to use R. In particular we are thinking of:\n\nNaomi: she is doing a PhD in genetics. Has been analyzing data with Excel for almost ten years. Is going to run 300 experiments in the next six months. Doesn’t want to have to do all the analyses by hand. And wants nicer charts for her thesis than she can produce in Excel.\nAndrea: has been working for many years analyzing crops, yields and prices from data she receives in spreadsheets. They handles Excel very well and although they has to start every analysis from scratch and need to copy tables and plots to word for the reports they need to build, they has a lot of practice. They hear about R and they thinks it can be useful to automate they workflow, but at the same time it is a challenge to change the way they has always been working.\nRodrigo: works with data in Google Sheets, because he edit the files with other people. Is not as experienced and often makes mistakes that force him to start the analysis over again. At the same time he is afraid of losing the original data and ends up download and saving into disck many versions of the same file. He wants to learn to program but does not know whether to start using R or Python and whether he will be able to solve the problems he has with Google Sheets with either of these tools."
  }
]